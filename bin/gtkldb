#!/usr/bin/python

#  gtkldb
#
#  Unix SMB/CIFS implementation.
#  Copyright (C) Jelmer Vernooij <jelmer@samba.org> 2007
#  Copyright (C) Dhananjay Sathe <dhananjaysathe@gmail.com> 2012
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#


"""Simple GTK frontend for LDB."""

from gi.repository import Gtk
from gi.repository import GObject
import ldb
import os
import sys

class LdbURLDialog(Gtk.Dialog):
    """Dialog that prompts for a LDB URL.
    """
    def __init__(self, parent=None,  url_store = None):

        super(LdbURLDialog, self).__init__(parent=parent,
                    buttons=(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL,
                            Gtk.STOCK_OPEN,Gtk.ResponseType.OK)
                                        )
        label = Gtk.Label("Enter URL:")
        self.vbox.pack_start(label, True, True, 0)
        self.url_combo_entry =  Gtk.ComboBox.new_with_model_and_entry(url_store)
        self.url_combo_entry.set_entry_text_column(1)
        self.vbox.pack_start(self.url_combo_entry, True, True, 0)
        self.show_all()

    def get_url(self):
        tree_iter = self.url_combo_entry.get_active_iter()
        if tree_iter is not None:
            model = self.url_combo_entry.get_model()
            url = model[tree_iter][1]
        else:
            entry = self.url_combo_entry.get_child()
            url = entry.get_text()

        return url



class LdbBrowser(Gtk.Window):
    """Sambagtk Ldb Browser.
    """
    def __init__(self):
        super(LdbBrowser, self).__init__()
        self.url_store = Gtk.ListStore(int, str) #for history
        self.url_store_count =0
        self.create()

    def create(self):
        self.set_title("Sambagtk Ldb Browser Utility")
        self.set_default_size(800, 600)
        self.icon_filename = os.path.join(sys.path[0], "images",
                                            "samba-logo-small.png")
        self.set_icon_from_file(self.icon_filename)
        accel_group = Gtk.AccelGroup()

        vbox = Gtk.VBox(False, 0)
        self.add(vbox)

        # Menu
        self.menubar = Gtk.MenuBar()
        vbox.pack_start(self.menubar, False, False, 0)

        self.file_item = Gtk.MenuItem.new_with_mnemonic('_File')
        self.menubar.add(self.file_item)

        file_menu = Gtk.Menu()
        self.file_item.set_property("submenu",file_menu)

        self.connect_item = Gtk.ImageMenuItem.new_from_stock(
                                                Gtk.STOCK_CONNECT, accel_group)
        self.connect_item.set_always_show_image(True)
        file_menu.add(self.connect_item)

        self.open_item = Gtk.ImageMenuItem.new_from_stock(
                                             Gtk.STOCK_OPEN, accel_group)
        self.open_item.set_always_show_image(True)
        file_menu.add(self.open_item)

        self.disconnect_item = Gtk.ImageMenuItem.new_from_stock(
                                             Gtk.STOCK_DISCONNECT, accel_group)
        self.disconnect_item.set_sensitive(False)
        self.disconnect_item.set_always_show_image(True)
        file_menu.add(self.disconnect_item)

        menu_separator_item = Gtk.SeparatorMenuItem()
        menu_separator_item.set_property("sensitive",False)
        file_menu.add(menu_separator_item)

        self.quit_item = Gtk.ImageMenuItem.new_from_stock(
                                                   Gtk.STOCK_QUIT, accel_group)
        self.quit_item.set_always_show_image(True)
        file_menu.add(self.quit_item)

        self.view_item = Gtk.MenuItem.new_with_mnemonic('_View')
        self.menubar.add(self.view_item)

        view_menu = Gtk.Menu()
        self.view_item.set_property("submenu",view_menu)

        self.hide_special = Gtk.CheckMenuItem.new_with_mnemonic(
                                                      "_Hide special entries")
        self.hide_special.set_sensitive(False)
        view_menu.add(self.hide_special)

        #main window

        pane = Gtk.HPaned()
        pane.set_position(200)
        vbox.pack_start(pane, True, True, 6)

        self.treeview = Gtk.TreeView()
        self.treemodel = Gtk.TreeStore(GObject.TYPE_STRING,
                                      GObject.TYPE_PYOBJECT)
        self.treeview.set_model(self.treemodel)
        self.treeview.set_headers_visible(False)
        self.treeview.append_column(Gtk.TreeViewColumn("_Dn",
                                    Gtk.CellRendererText(), text=0))

        self.attributeview = Gtk.TreeView()
        self.attributemodel = Gtk.ListStore(str, str, GObject.TYPE_PYOBJECT)
        self.attributeview.set_model(self.attributemodel)
        self.attributeview.append_column(Gtk.TreeViewColumn("_Name",
                                         Gtk.CellRendererText(), text=0))
        self.attributeview.append_column(Gtk.TreeViewColumn("_Value",
                                         Gtk.CellRendererText(), text=1))


        treeview_window = Gtk.ScrolledWindow()
        treeview_window.add(self.treeview)
        pane.pack1(treeview_window, resize=False, shrink=True)

        attributeview_window = Gtk.ScrolledWindow()
        attributeview_window.add(self.attributeview)
        pane.pack2(attributeview_window, shrink=True)

        #statusbar
        self.statusbar = Gtk.Statusbar()
        vbox.pack_end(self.statusbar, False, False, 0)

        # signals and connections

        self.connect('delete_event', self.on_self_delete)

        self.connect_item.connect('activate', self.cb_connect)
        self.open_item.connect('activate', self.cb_open)
        self.disconnect_item.connect('activate', self.cb_disconnect)
        self.quit_item.connect("activate", self.on_quit_item_activate)

        self.hide_special.connect('toggled', self.toggle_special_entries)

        self.add_accel_group (accel_group)

    def on_quit_item_activate(self, widget):
        self.on_self_delete(None, None)

    def on_self_delete(self, widget, event):
        Gtk.main_quit()
        return False

    def set_ldb(self, ldb):
        """Change the LDB object displayed.

        :param ldb: New LDB object to use.
        """
        self.ldb = ldb
        self.disconnect_item.set_sensitive(True)
        self.hide_special.set_sensitive(True)
        self.fill_tree()

    def cb_connect(self, button):
        dialog = LdbURLDialog(url_store = self.url_store)
        if dialog.run() == Gtk.ResponseType.OK:
            url = dialog.get_url()
            self.set_ldb(Ldb(url))
            # since this method is called only at the end to return the value to the utility
            self.url_store_count += 1
            self.url_store.append([self.url_store_count, url])
            self.disconnect_item.set_sensitive(True)
            self.hide_special.set_sensitive(True)
        dialog.destroy()

    def cb_open(self, button):
        dialog = Gtk.FileChooserDialog(title="Please choose a file",
                    parent=self,
                    buttons=(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                            Gtk.STOCK_OPEN, Gtk.ResponseType.OK))
        if dialog.run() == Gtk.ResponseType.OK:
            self.set_ldb(Ldb(dialog.get_filename()))

        dialog.destroy()

    def cb_disconnect(self, button):
        self.treemodel.clear()
        self.attributemodel.clear()
        self.disconnect_item.set_sensitive(False)
        self.hide_special.set_sensitive(False)
        self.ldb = None

    def fill_tree(self, hide_special=False):
        self.treemodel.clear()
        paths = {}
        def add_node(dn):
            if dn.is_special() and hide_special:
                return None
            if paths.has_key(str(dn)):
                return paths[str(dn)]
            parent_dn = dn.parent()
            text = str(dn)
            if parent_dn is not None and str(parent_dn) != '':
                parent = add_node(parent_dn)
                text = text[:-len(str(parent_dn))].rstrip(",")
            else:
                parent = None
            paths[str(dn)] = self.treemodel.append(parent, [text, dn])

        for msg in self.ldb.search(None, ldb.SCOPE_SUBTREE, None, ["dn"]):
            add_node(msg.dn)

    def toggle_special_entries(self, item):
        self.fill_tree(item.get_active())

    def treeview_cursor_cb(self, item):
        (model, iter) = item.get_selection().get_selected()
        dn = model.get_value(iter, 1)
        self.attributemodel.clear()
        msg = self.ldb.search(dn, ldb.SCOPE_BASE)[0]
        for name, el in msg.iteritems():
            if name == "dn":
                continue
            for val in set(el):
                self.attributemodel.append([name, val, el])

def Ldb(url):
    """Create a new LDB object.

    :param url: LDB URL to connect to.
    """
    ret = ldb.Ldb()
    path = os.getenv("LDB_MODULES_PATH")
    if path is not None:
        ret.set_modules_dir(path)
    ret.connect(url)
    return ret


if __name__ == '__main__':

    browser = LdbBrowser()
    if len(sys.argv) > 1:
        browser.set_ldb(Ldb(sys.argv[1]))
    browser.show_all()
    Gtk.main()
