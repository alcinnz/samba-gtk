#!/usr/bin/python

import sys
import os.path
import traceback
import getopt
import gettext
gettext.install('gwcrontab')

from gi.repository import GObject, Gtk, Gdk, GdkPixbuf, GLib

from samba import credentials
from samba.dcerpc import atsvc

from sambagtk.dialogs import AboutDialog
from sambagtk.moderngtk import build_toolbar, build_inline_toolbar
from sambagtk import connect

from sambagtk.atsvc import ATSvcConnectDialog, Task, TaskEditDialog


class ATSvcPipeManager:

    def __init__(self, server_address, transport_type, username, password):
        self.task_list = []

        creds = credentials.Credentials()
        if (username.count("\\") > 0):
            creds.set_domain(username.split("\\")[0])
            creds.set_username(username.split("\\")[1])
        elif (username.count("@") > 0):
            creds.set_domain(username.split("@")[1])
            creds.set_username(username.split("@")[0])
        else:
            creds.set_domain("")
            creds.set_username(username)
        creds.set_workstation("")
        creds.set_password(password)

        binding = ["ncacn_np:%s", "ncacn_ip_tcp:%s", "ncalrpc:%s"][
                  transport_type]

        self.pipe = atsvc.atsvc(binding % (server_address),credentials = creds)

    def close(self):
        pass # apparently there's no .Close() method for this pipe

    def fetch_tasks(self):
        del self.task_list[:]

        (ctr, total, resume) = self.pipe.JobEnum(unicode(self.pipe.server_name)
                                                ,atsvc.enum_ctr(),
                                                1000000,
                                                0)
        if (total > 0):
            for info in ctr.first_entry:
                task = self.job_info_to_task(info)
                self.task_list.append(task)

    def add_task(self, task):
        job_id = self.pipe.JobAdd(unicode(self.pipe.server_name)
                                  ,self.task_to_job_info(task))
        if (job_id == 0):
            raise RuntimeError(-1, "Invalid task information.")

        task.id = job_id
        self.task_list.append(task)

    def update_task(self, task):
        job_id = self.pipe.JobAdd(unicode(self.pipe.server_name)
                                 ,self.task_to_job_info(task))
        if (job_id == 0):
            raise Exception("invalid task information")

        self.pipe.JobDel(unicode(self.pipe.server_name), task.id, task.id)

        task.id = job_id

    def delete_task(self, task):
        self.pipe.JobDel(unicode(self.pipe.server_name), task.id, task.id)

    def job_info_to_task(self, job_info):
        task = Task(job_info.command, job_info.job_id)

        task.job_time = job_info.job_time
        task.days_of_month = job_info.days_of_month
        task.days_of_week = job_info.days_of_week
        task.run_periodically = (job_info.flags & 0x01) != 0
        task.non_interactive = (job_info.flags & 0x10) != 0

        return task

    def task_to_job_info(self, task):
        job_info = atsvc.JobInfo()

        job_info.command = unicode(task.command)
        job_info.job_time = task.job_time
        job_info.days_of_month = task.days_of_month
        job_info.days_of_week = task.days_of_week
        job_info.flags = 0

        if (task.run_periodically):
            job_info.flags |= 0x01
        if (task.non_interactive):
            job_info.flags |= 0x10

        return job_info


class CronTabWindow(Gtk.Window):

    def __init__(self,info_callback=None,
                     server="",
                     username="",
                     password="",
                     transport_type=0,
                     connect_now=False):
        super(CronTabWindow, self).__init__()
        # Note: Any change to these arguments should probably also be changed
        # in on_connect_item_activate()

        self.create()
        self.pipe_manager = None
        self.set_status(_("Disconnected"))
        self.update_sensitivity()

        # It's nice to have this info saved when a user wants to reconnect
        self.server_address = server
        self.username = username
        self.transport_type = transport_type

        self.on_connect_item_activate(None, server, transport_type,
                                     username, password, connect_now)

        # This is used so the parent program can grab the server info after we've connected.
        if info_callback is not None:
            info_callback(server = self.server_address,
                         username = self.username,
                         transport_type = self.transport_type)

    def create(self):
        # main window

        accel_group = Gtk.AccelGroup()

        self.set_title(_("Scheduled Tasks"))
        self.set_default_size(800, 600)

        vbox = Gtk.VBox(False, 0)
        self.add(vbox)

        # toolbar

        self.toolbar = build_toolbar(self, vbox)

        self.connect_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_CONNECT)
        self.connect_button.set_tooltip_text(_("Connect to a server"))
        self.toolbar.add(self.connect_button)

        self.disconnect_button = Gtk.ToolButton.new_from_stock(
                                                         Gtk.STOCK_DISCONNECT)
        self.disconnect_button.set_tooltip_text(_("Disconnect from the server"))
        self.toolbar.add(self.disconnect_button)
        
        self.refresh_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_REFRESH)
        self.refresh_button.set_tooltip_text(_("Reload data"))
        self.toolbar.add(self.refresh_button)

        self.toolbar.add(Gtk.SeparatorToolItem())
        
        self.about_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_ABOUT)
        self.about_button.set_tooltip_text(_("About gwcrontab..."))
        if hasattr(self.toolbar, 'pack_end'):
            self.toolbar.pack_end(self.about_button)
        else:
            self.toolbar.add(self.about_button)


        # task list


        self.scrolledwindow = Gtk.ScrolledWindow(None, None)
        self.scrolledwindow.set_shadow_type(Gtk.ShadowType.IN)
        vbox.pack_start(self.scrolledwindow, True, True, 0)

        self.tasks_tree_view = Gtk.TreeView()
        self.scrolledwindow.add(self.tasks_tree_view)

        column = Gtk.TreeViewColumn()
        column.set_title("")
        renderer = Gtk.CellRendererPixbuf()
        renderer.set_property('icon-name', 'appointment')
        column.pack_start(renderer, True)
        self.tasks_tree_view.append_column(column)

        column = Gtk.TreeViewColumn()
        column.set_title(_("_Id"))
        column.set_resizable(True)
        column.set_sort_column_id(0)
        renderer = Gtk.CellRendererText()
        column.pack_start(renderer, True)
        self.tasks_tree_view.append_column(column)
        column.add_attribute(renderer, "text", 0)

        column = Gtk.TreeViewColumn()
        column.set_title(_("_Command"))
        column.set_resizable(True)
        column.set_sort_column_id(1)
        renderer = Gtk.CellRendererText()
        column.pack_start(renderer, True)
        self.tasks_tree_view.append_column(column)
        column.add_attribute(renderer, "text", 1)

        column = Gtk.TreeViewColumn()
        column.set_title(_("_Schedule"))
        column.set_resizable(True)
        column.set_sort_column_id(2)
        renderer = Gtk.CellRendererText()
        column.pack_start(renderer, True)
        self.tasks_tree_view.append_column(column)
        column.add_attribute(renderer, "text", 2)

        self.tasks_store = Gtk.ListStore(GObject.TYPE_STRING
                                        ,GObject.TYPE_STRING
                                        ,GObject.TYPE_STRING)
        self.tasks_store.set_sort_column_id(1, Gtk.SortType.ASCENDING)
        self.tasks_tree_view.set_model(self.tasks_store)

        # inline toolbar
        inline_toolbar = build_inline_toolbar()
        vbox.pack_start(inline_toolbar, expand=False, fill=False, padding=0)
        
        self.new_button = Gtk.ToolButton.new(None, _("_New"))
        self.new_button.set_icon_name('list-add-symbolic')
        self.new_button.set_tooltip_text(_("Add a new share"))
        inline_toolbar.add(self.new_button)
        
        self.delete_button = Gtk.ToolButton.new(None, _("_Delete"))
        self.delete_button.set_icon_name('list-remove-symbolic')
        self.delete_button.set_tooltip_text(_("Delete selected share"))
        inline_toolbar.add(self.delete_button)
        
        self.edit_button = Gtk.ToolButton.new(None, _("_Edit"))
        self.edit_button.set_icon_name('edit-symbolic')
        self.edit_button.set_tooltip_text(_("Edit selected share"))
        inline_toolbar.add(self.edit_button)

        # status bar

        self.statusbar = Gtk.Statusbar()
        vbox.pack_start(self.statusbar, False, False, 0)


        # signals/events

        self.connect("delete_event", self.on_self_delete)
        self.connect("key-press-event", self.on_key_press)

        self.connect_button.connect("clicked", self.on_connect_item_activate)
        self.disconnect_button.connect("clicked",
                                            self.on_disconnect_item_activate)
        self.refresh_button.connect("clicked", self.on_refresh_item_activate)
        self.new_button.connect("clicked", self.on_new_item_activate)
        self.delete_button.connect("clicked", self.on_delete_item_activate)
        self.edit_button.connect("clicked", self.on_edit_item_activate)
        self.about_button.connect("clicked", self.on_about_item_activate)

        self.tasks_tree_view.get_selection().connect("changed",
                                                    self.on_update_sensitivity)
        self.tasks_tree_view.connect("button_press_event",
                                    self.on_tasks_tree_view_button_press)

        self.add_accel_group(accel_group)

    def refresh_tasks_tree_view(self):
        if not self.connected():
            return None

        (model, paths) = \
                      self.tasks_tree_view.get_selection().get_selected_rows()

        self.tasks_store.clear()
        for task in self.pipe_manager.task_list:
            self.tasks_store.append(task.list_view_representation())

        if (len(paths) > 0):
            self.tasks_tree_view.get_selection().select_path(paths[0])

    def get_selected_task(self):
        if not self.connected():
            return None

        (model, iter) = self.tasks_tree_view.get_selection().get_selected()
        if (iter == None): # no selection
            return None
        else:
            id = int(model.get_value(iter, 0))
            task_list = [task for task in
                        self.pipe_manager.task_list if
                        task.id == id]
            if (len(task_list) > 0):
                return task_list[0]
            else:
                return None

    def set_status(self, message):
        self.statusbar.pop(0)
        self.statusbar.push(0, message)

    def update_sensitivity(self):
        connected = (self.pipe_manager is not None)
        selected = (self.get_selected_task() is not None)

        self.connect_button.set_sensitive(not connected)
        self.disconnect_button.set_sensitive(connected)
        self.refresh_button.set_sensitive(connected)
        self.new_button.set_sensitive(connected)
        self.delete_button.set_sensitive(connected and selected)
        self.edit_button.set_sensitive(connected and selected)

    def run_message_dialog(self, type, buttons, message, parent = None):
        if (parent == None):
            parent = self

        message_box = Gtk.MessageDialog(parent, Gtk.DialogFlags.MODAL, type,
                                       buttons, message)
        response = message_box.run()
        message_box.hide()

        return response

    def run_task_edit_dialog(self, task = None, apply_callback = None):
        dialog = TaskEditDialog(task)
        dialog.show_all()

        # loop to handle the applies
        while True:
            response_id = dialog.run()

            if (response_id in [Gtk.ResponseType.OK, Gtk.ResponseType.APPLY]):
                problem_msg = dialog.check_for_problems()

                if (problem_msg is not None):
                    self.run_message_dialog(Gtk.MessageType.ERROR, Gtk.ButtonsType.OK, problem_msg, dialog)
                else:
                    dialog.values_to_task()
                    if (apply_callback is not None):
                        apply_callback(dialog.task)
                    if (response_id == Gtk.ResponseType.OK):
                        dialog.hide()
                        break

            else:
                dialog.hide()
                return None

        return dialog.task

    def run_connect_dialog(self, pipe_manager,
                                 server_address,
                                 transport_type,
                                 username,
                                 password ,
                                 connect_now = False):
        dialog = ATSvcConnectDialog(server_address, transport_type,
                                    username, password)
        dialog.show_all()

        # loop to handle the failures
        while True:
            if (connect_now):
                connect_now = False
                response_id = Gtk.ResponseType.OK
            else:
                response_id = dialog.run()

            if (response_id != Gtk.ResponseType.OK):
                dialog.hide()
                return None
            else:
                try:
                    server_address = dialog.get_server_address()
                    self.server_address = server_address
                    transport_type = dialog.get_transport_type()
                    self.transport_type = transport_type
                    username = dialog.get_username()
                    self.username = username
                    password = dialog.get_password()

                    print "Throws 'NT_STATUS_PORT_UNREACHABLE'"
                    pipe_manager = ATSvcPipeManager(server_address,
                                                   transport_type,
                                                   username,
                                                   password)
                    break

                except RuntimeError, re:
                    if re.args[1] == 'Logon failure': #user got the password wrong
                        self.run_message_dialog(Gtk.MessageType.ERROR,
                                        Gtk.ButtonsType.OK,
                                        _("Failed to connect: "
                                            "Invalid username or password."),
                                        dialog)
                        dialog.password_entry.grab_focus()
                        # Select all the text in the password box
                        dialog.password_entry.select_region(0, -1)
                    elif re.args[0] == 5 or re.args[1] == 'Access denied':
                        self.run_message_dialog(Gtk.MessageType.ERROR,
                                       Gtk.ButtonsType.OK,
                                       _("Failed to connect: Access Denied."),
                                       dialog)
                        dialog.username_entry.grab_focus()
                        dialog.username_entry.select_region(0, -1)
                    elif re.args[1] == 'NT_STATUS_HOST_UNREACHABLE':
                        self.run_message_dialog(Gtk.MessageType.ERROR,
                                        Gtk.ButtonsType.OK,
                                        _("Failed to connect: "
                                            "Could not contact the server."),
                                        dialog)
                        dialog.server_address_entry.grab_focus()
                        dialog.server_address_entry.select_region(0, -1)
                    elif re.args[1] == 'NT_STATUS_NETWORK_UNREACHABLE':
                        self.run_message_dialog(Gtk.MessageType.ERROR,
                                        Gtk.ButtonsType.OK,
                                        _("Failed to connect: "
                                            "The network is unreachable.\n\n"
                                            "Please check your network connection."),
                                        dialog)
                    elif re.args[1] == 'NT_STATUS_CONNECTION_REFUSED':
                        self.run_message_dialog(Gtk.MessageType.ERROR,
                                        Gtk.ButtonsType.OK,
                                        _("Failed to connect: "
                                            "The connection was refused."),
                                        dialog)
                    else:
                        msg = _("Failed to connect: %s.") % (re.args[1])
                        print msg
                        traceback.print_exc()
                        self.run_message_dialog(Gtk.MessageType.ERROR,
                                               Gtk.ButtonsType.OK, msg, dialog)

                except Exception, ex:
                    msg = _("Failed to connect: %s.") % (str(ex))
                    print msg
                    traceback.print_exc()
                    self.run_message_dialog(Gtk.MessageType.ERROR,
                                           Gtk.ButtonsType.OK, msg, dialog)

        dialog.hide()
        return pipe_manager

    def connected(self):
        return self.pipe_manager is not None

    def update_task_callback(self, task):
        try:
            self.pipe_manager.update_task(task)
            self.pipe_manager.fetch_tasks()

            self.set_status(_("Task updated"))

        except RuntimeError, re:
            msg = _("Failed to update task: %s") % (re.args[1])
            print msg
            self.set_status(msg)
            traceback.print_exc()
            self.run_message_dialog(Gtk.MessageType.ERROR,
                                   Gtk.ButtonsType.OK, msg)

        except Exception, ex:
            msg = _("Failed to update task: %s") % (str(ex))
            print msg
            self.set_status(msg)
            traceback.print_exc()
            self.run_message_dialog(Gtk.MessageType.ERROR,
                                    Gtk.ButtonsType.OK, msg)

        self.refresh_tasks_tree_view()

    def on_self_delete(self, widget, event):
        if (self.pipe_manager is not None):
            self.on_disconnect_item_activate(self.disconnect_button)

        Gtk.main_quit()
        return False

    def on_key_press(self, widget, event):
        if event.keyval == Gdk.KEY_F5:
            # Refresh when F5 is pressed
            self.on_refresh_item_activate(None)
        elif event.keyval == Gdk.KEY_Return:
            # Emulate a double-click
            myev = Gdk.Event(Gdk.EventType._2BUTTON_PRESS)
            self.on_tasks_tree_view_button_press(None, myev)

    def on_connect_item_activate(self, widget, server = "",
                                               transport_type = 0,
                                               username = "",
                                               password = "",
                                               connect_now = False):
        transport_type = transport_type or self.transport_type
        if transport_type is 2:
            server = '127.0.0.1'
        else:
            server = server or self.server_address
        username = username or self.username

        try:
            self.pipe_manager = self.run_connect_dialog(None, server,
                                                        transport_type,
                                                        username, password,
                                                        connect_now)
            if (self.pipe_manager is not None):
                self.pipe_manager.fetch_tasks()

                # Because the global variable is updated by the
                # run_connect_dialog() function
                self.set_status(_("Connected to %s") % self.server_address)

        except RuntimeError, re:
            msg = _("Failed to retrieve the scheduled tasks: %s") % re.args[1]
            self.set_status(msg)
            print msg
            traceback.print_exc()
            self.run_message_dialog(Gtk.MessageType.ERROR,
                                   Gtk.ButtonsType.OK, msg)

        except Exception, ex:
            msg = _("Failed to retrieve the scheduled tasks: %s") % str(ex)
            self.set_status(msg)
            print msg
            traceback.print_exc()
            self.run_message_dialog(Gtk.MessageType.ERROR,
                                   Gtk.ButtonsType.OK, msg)

        self.refresh_tasks_tree_view()
        self.update_sensitivity()

    def on_disconnect_item_activate(self, widget):
        if (self.pipe_manager is not None):
            self.pipe_manager.close()
            self.pipe_manager = None

        self.tasks_store.clear()
        self.update_sensitivity()

        self.set_status(_("Disconnected"))

    def on_refresh_item_activate(self, widget):
        try:
            self.pipe_manager.fetch_tasks()

            self.set_status(_("Connected to %s") % (self.server_address))

        except RuntimeError, re:
            msg = _("Failed to retrieve the scheduled tasks: %s") % re.args[1]
            self.set_status(msg)
            print msg
            traceback.print_exc()
            self.run_message_dialog(Gtk.MessageType.ERROR,
                                   Gtk.ButtonsType.OK, msg)

        except Exception, ex:
            msg = _("Failed to retrieve the scheduled tasks: %s") % str(ex)
            self.set_status(msg)
            print msg
            traceback.print_exc()
            self.run_message_dialog(Gtk.MessageType.ERROR,
                                   Gtk.ButtonsType.OK, msg)

        self.refresh_tasks_tree_view()

    def on_new_item_activate(self, widget):
        new_task = self.run_task_edit_dialog()
        if (new_task == None):
            return

        try:
            self.pipe_manager.add_task(new_task)
            self.pipe_manager.fetch_tasks()

            self.set_status(_("Successfully created the task"))

        except RuntimeError, re:
            msg = _("Failed to create task: %s") % re.args[1]
            self.set_status(msg)
            print msg
            traceback.print_exc()
            self.run_message_dialog(Gtk.MessageType.ERROR,
                                   Gtk.ButtonsType.OK, msg)

        except Exception, ex:
            msg = _("Failed to create task: %s")  % (str(ex))
            self.set_status(msg)
            print msg
            traceback.print_exc()
            self.run_message_dialog(Gtk.MessageType.ERROR,
                                   Gtk.ButtonsType.OK, msg)

        self.refresh_tasks_tree_view()

    def on_delete_item_activate(self, widget):
        del_task = self.get_selected_task()

        # TODO Besides expecting users to read the dialog body text and
        #       identify tasks by ID,
        #       it also expects them to consider everytime and not form habits.
        #       Needs a redesign. Maybe add a trashcan. 
        if (self.run_message_dialog(Gtk.MessageType.QUESTION,
                                Gtk.ButtonsType.YES_NO,
                                _("Do you want to delete task with ID '%d'?")
                                        % del_task.id)
                                    != Gtk.ResponseType.YES):
            return

        try:
            self.pipe_manager.delete_task(del_task)
            self.pipe_manager.fetch_tasks()

            self.set_status(_("Successfully deleted the task"))

        except RuntimeError, re:
            msg = _("Failed to delete task: %s") % (re.args[1])
            self.set_status(msg)
            print msg
            traceback.print_exc()
            self.run_message_dialog(Gtk.MessageType.ERROR,
                                   Gtk.ButtonsType.OK, msg)

        except Exception, ex:
            msg = _("Failed to delete task: %s") % (str(ex))
            self.set_status(msg)
            print msg
            traceback.print_exc()
            self.run_message_dialog(Gtk.MessageType.ERROR,
                                   Gtk.ButtonsType.OK, msg)

        self.refresh_tasks_tree_view()

    def on_edit_item_activate(self, widget):
        edit_task = self.get_selected_task()
        self.run_task_edit_dialog(edit_task, self.update_task_callback)

    def on_about_item_activate(self, widget):
        dialog = AboutDialog(
             "GWCronTab",
             _("A tool to remotely manage scheduled tasks.\n"
                " Based on Jelmer Vernooij's original Samba-GTK"),
             'samba-gwcrontab'
             )
        dialog.run()
        dialog.hide()

    def on_tasks_tree_view_button_press(self, widget, event):
        if (self.get_selected_task() == None):
            return

        if (event.type == Gdk.EventType._2BUTTON_PRESS):
            self.on_edit_item_activate(self.edit_button)

    def on_update_sensitivity(self, widget):
        self.update_sensitivity()

if __name__ == "__main__":
    GLib.set_prgname("gwcrontab")
    #the [1:] ignores the first argument, which is the path to our utility
    arguments = connect.parse_args("gwcrontab", sys.argv[1:])

    main_window = CronTabWindow(**arguments)
    main_window.show_all()
    Gtk.main()
